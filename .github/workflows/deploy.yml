name: Build & Deploy

on:
  push:
    branches:
      - master

jobs:
  push-compose:
    name: push docker-compose.yml to server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: "194.87.94.5"
          username: "lev"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/lev/project"

  build-and-push:
    name: build bot by maven, build docker images, push to hub
    runs-on: ubuntu-latest
    needs: push-compose
    steps:
      - uses: actions/checkout@v3

      - name: set up jdk 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: build by maven
        run: mvn clean install -pl bot -am

      - name: build docker images
        run: |
          # bot
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/avito-bot:latest ./bot
          
          # nginx frontend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest ./frontend

      - name: log in docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: push docker images to docker hub
        run: |
          # push bot image
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/avito-bot:latest
          
          # push nginx frontend image
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest

  deploy:
    name: deploy to server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()
    steps:
      - name: connect to server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: "194.87.94.5"
          username: "lev"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/lev/project
            echo "DB_USERNAME=${{ secrets.POSTGRES_USERNAME }}" > .env
            echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "AVITO_BOT_TOKEN=${{ secrets.AVITO_BOT_TOKEN }}" >> .env

            # Останавливаем существующие контейнеры
            docker stop bot || true
            docker stop db || true
            docker stop nginx-frontend || true
            docker stop certbot || true

            # Удаляем контейнеры
            docker rm bot || true
            docker rm db || true
            docker rm nginx-frontend || true
            docker rm certbot || true

            # Удаляем старые образы
            docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/avito-bot:latest || true
            docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/nginx-frontend:latest || true
            docker rmi postgres:latest || true
            docker rmi certbot/certbot:latest || true

            # Запускаем docker-compose
            docker-compose up -d
            docker ps -a